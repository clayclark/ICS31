# ICS 31, Thursday 3 November 2016, 11am class

"""
BIG PICTURE:  A programming language lets us model the real world.
    A PL gives us ways to represent:
        Things/nouns/objects (ints, floats, lists, namedtuples)
            Data structures
        Actions/verbs/functions,methods,operators,statements
            Control structures:  sequence, modularity (function calling/
                returning), selection (if/elif/else), repetition (loops)

Data structures/data types
    Single-valued:   int   float   bool   str [also a sequence of characters]
    Multiple-valued:
        Lists:  collections of objects of the same category/type
        Namedtuples:  package of possibly different-type data fields
            that describe an object
        tuples:  Like namedtuples without the names.  T[0]  T[1]
        files:  give us persistence---stuff sticks around
        [dictionaries, sets, two-dimensional tables ... for later]
        We can combine these for richer, more realistic objects.

Control structures/sttements:
    Single operations:
        +   -  *   /   % (mod)   // (integer division)
        Functions and methods:     len(L)    L.count('ok')    print()
        Statements:    assert BE       assignment
    We can combine these in a few ways:
        Nesting:   print(len(s))    z = 2 * (len(x) + len(y))
        Sequence:
            statement1
            statement2
            statement3

            Each statement can be simple or compound:
                statement1
                if BOOLEAN-EXPRESSION:
                    statement2a
                else:
                    statement2b
                    statement2c
                statement3

        Advice:   Know the syntax and semantics of each statement/control structure

    Control structures for MODULARITY:   functions/methods  f(a,b,c)  X.m(d)
    Control structure for selection:  if   if/else   if/elif/elif/.../else
    Control structures for repetition:  for   while   [recursion]
        "for-each" loop:
            for VAR in SEQUENCE:
                BODY
            for x in L:
                print(x)

        "indexing for-loop" (where control variable is a number, not an item)
            for i in range(len(L)):
                BODY

            for i in range(len(L)):
                L[i] = L[i] * 100
                #  i = i * 100      This doesn't change L!
                print(i+1, ".", L[i]

                range() function:  range(START,END,STEP) produces a
                    sequence of numbers
"""
for i in range(0,20,2):
    print(i)
for i in range(0,20,3):
    print(i)

"""
for-loops are designed for a set number of iterations/repetitions
while loops are designed for indefinite repetitions (depending on outside
    conditions):  Just repeat until something happens (B.E. becomes false)

    while BOOLEAN-EXPRESSION:
        statement1
        statement2
    statement3    # Not part of the loop body; done AFTER loop terminates

Sometimes we want to quit (we have our answer) before we're done repeating
    (e.g., before we hit the end of a list)

# find the first Thai restaurant on the list
found_one = False
for r in L:
    if not found_one and r.cuisine == 'Thai':
        first_thai_rest = r
        found_one = True
return first_thai_rest

# find the first Thai restaurant on the list,
# assuming there's at least one Thai restaurant
for r in L:
    if r.cuisine == 'Thai':
        first_thai_rest = r
        break
# Could be more work to do here
return first_thai_rest

# find the first Thai restaurant on the list,
# not assuming there's at least one Thai restaurant,
# so we need some way to indicate "not found"
first_thai_rest = ""   # Use empty string for "not found"
for r in L:
    if r.cuisine == 'Thai':
        first_thai_rest = r
        return first_thai_rest    # Breaks out of FUNCTION, not just loop
# Could be more work to do here
return first_thai_rest

# find the first Thai restaurant on the list,
# not assuming there's at least one Thai restaurant,
# so we need some way to indicate "not found"
first_thai_rest = ""   # Use empty string for "not found"
for r in L:
    if r.cuisine == 'Thai':
        first_thai_rest = r
        break   # Breaks out of the loop
# Could be more work to do here
return first_thai_rest

# find the first Thai restaurant on the list,
# not assuming there's at least one Thai restaurant,
# so we need some way to indicate "not found"
for r in L:
    if r.cuisine == 'Thai':
        return r        # Breaks out of FUNCTION, not just loop
# Could be more work to do here
return ""

Point is, small differences in coding can have semantic differences,
perhaps in the exceptional (e.g., not-found) cases.

break:  Out of the current loop
return: Out of the current FUNCTION
continue:   out of the current ITERATION of the loop

for i in s:
    statement1
    statement2
    if whatever():
        continue   # Skip statements 3 and 4 THIS TIME THROUGH
    statement3
    statement4
statement5      # Next statement after loop is done.

continue is just syntactic sugar, equivalent to:

for i in s:
    statement1
    statement2
    if not whatever():
        statement3
        statement4
statement5      # after loop is done.

Try this little task:

Write a function called "agelaws" that takes an int representing
a person's age and returns one of these strings:
    Can neither vote nor drink
    Can vote but not drink
    Can both vote and drink
in accordance with current U.S. law:  Voting at 18 or over,
    drinking (i.e., purchasing alcohol) at 21 or over.
"""


VOTINGAGE = 18
DRINKINGAGE = 21

def agelaws(age: int) -> str:
    ''' Return a string categorizing voting and drinking eligibility '''
    if age < VOTINGAGE:
        result = "Can neither vote nor drink"
    elif age >= VOTINGAGE and age < DRINKINGAGE:
        result = "Can vote but not drink"
    else:
        result = "Can both vote and drink"
    return result

assert agelaws(5) == "Can neither vote nor drink"
assert agelaws(17) == "Can neither vote nor drink"
assert agelaws(18) == "Can vote but not drink"
assert agelaws(19) == "Can vote but not drink"
assert agelaws(20) == "Can vote but not drink"
assert agelaws(21) == "Can both vote and drink"
assert agelaws(22) == "Can both vote and drink"
assert agelaws(105) == "Can both vote and drink"



def agelaws(age: int) -> str:
    ''' Return a string categorizing voting and drinking eligibility '''
    if age < VOTINGAGE:
        return "Can neither vote nor drink"
    elif age >= VOTINGAGE and age < DRINKINGAGE:
        return "Can vote but not drink"
    else:
        return "Can both vote and drink"

assert agelaws(5) == "Can neither vote nor drink"
assert agelaws(17) == "Can neither vote nor drink"
assert agelaws(18) == "Can vote but not drink"
assert agelaws(19) == "Can vote but not drink"
assert agelaws(20) == "Can vote but not drink"
assert agelaws(21) == "Can both vote and drink"
assert agelaws(22) == "Can both vote and drink"
assert agelaws(105) == "Can both vote and drink"


def agelaws(age: int) -> str:
    ''' Return a string categorizing voting and drinking eligibility '''
    if age < VOTINGAGE:
        return "Can neither vote nor drink"
    elif age < DRINKINGAGE:
        return "Can vote but not drink"
    else:
        return "Can both vote and drink"


assert agelaws(5) == "Can neither vote nor drink"
assert agelaws(17) == "Can neither vote nor drink"
assert agelaws(18) == "Can vote but not drink"
assert agelaws(19) == "Can vote but not drink"
assert agelaws(20) == "Can vote but not drink"
assert agelaws(21) == "Can both vote and drink"
assert agelaws(22) == "Can both vote and drink"
assert agelaws(105) == "Can both vote and drink"

def agelaws(age: int) -> str:
    ''' Return a string categorizing voting and drinking eligibility '''
    if age < VOTINGAGE:
        return "Can neither vote nor drink"
    if age < DRINKINGAGE:
        return "Can vote but not drink"
    else:
        return "Can both vote and drink"

assert agelaws(5) == "Can neither vote nor drink"
assert agelaws(17) == "Can neither vote nor drink"
assert agelaws(18) == "Can vote but not drink"
assert agelaws(19) == "Can vote but not drink"
assert agelaws(20) == "Can vote but not drink"
assert agelaws(21) == "Can both vote and drink"
assert agelaws(22) == "Can both vote and drink"
assert agelaws(105) == "Can both vote and drink"

"""  No good:  Don't exclude under-18s from subsequent questions.
def agelaws(age: int) -> str:
    ''' Return a string categorizing voting and drinking eligibility '''
    if age < VOTINGAGE:
        result = "Can neither vote nor drink"
    if age >= VOTINGAGE and age < DRINKINGAGE:
        result = "Can vote but not drink"
    else:
        result = "Can both vote and drink"
    return result

assert agelaws(5) == "Can neither vote nor drink"
assert agelaws(17) == "Can neither vote nor drink"
assert agelaws(18) == "Can vote but not drink"
assert agelaws(19) == "Can vote but not drink"
assert agelaws(20) == "Can vote but not drink"
assert agelaws(21) == "Can both vote and drink"
assert agelaws(22) == "Can both vote and drink"
assert agelaws(105) == "Can both vote and drink"
"""


## Developing the Restaurants program (11:00 version)

"""
One way to partition/organize the project:
    Model:  How the program "thinks" about things internally.
        Here, a Restaurant namedtuple and a list of Restaurants.
        Usually stays same, no matter platform (phone, tablet, ...)
    View:  How the program appears to the user.  (User Interface)
        Text-oriented, conversational, menu-driven.

We'll start with the view; it's quicker gratification.

"""
from collections import namedtuple # Customary to have imports at top
def restaurants():
    ''' Main program [controller].  Create and maintain
        a database of restaurants.
    '''
    print('Welcome to the restaurants program!')
    print()
    choice = """If you'd like to read restaurants from an existing file,
        type the name of that file; if not, just hit RETURN: """
    filename = input(choice)
    if filename == "":    # They just hit RETURN
        our_rests = Collection_new()  # Start with an empty collection.
    else:
        our_rests = fill_collection_from_file(filename)
    our_rests = handle_commands(our_rests)
    write_file_from_collection(our_rests)

    print()
    print("Thank you.  Good-bye.")
    return

def handle_commands(L: 'list') -> 'list':
    ''' Handle the commands '''
    pass  # This definition is called a PROGRAM STUB
"""
def handle_commands(L: [Restaurant]) -> [Restaurant]:
    ''' Handle the commands '''
    pass  # This definition is called a PROGRAM STUB
"""
def handle_commands(L: 'list of Restaurant') -> 'list of Restaurant':
    ''' Handle the commands '''
    pass  # This definition is called a PROGRAM STUB

MENU = """
Restaurant Collection Program --- Choose one
 a:  Add a new restaurant to the collection
 r:  Remove a restaurant from the collection
 s:  Search the collection for selected restaurants
 p:  Print all the restaurants
 q:  Quit
"""
def handle_commands(RC: 'list of Restaurant') -> 'list of Restaurant':
    ''' Print menu, get response, do the right thing '''
    while True:
        command = input(MENU)
        if command == 'q':
            break   # User wants to quit; break out of loop.
        else:
            print("You typed '", command, "'.", sep="")

    return RC

def handle_commands(RC: 'list of Restaurant') -> 'list of Restaurant':
    ''' Print menu, get response, do the right thing '''
    while True:
        command = input(MENU)
        if command == 'q':
            break   # User wants to quit; break out of loop.
        else:
            if command == 'a':
                print("You want to add a new restaurant")
            else:
                if command == 'r':
                    print("You want to remove a restaurant")
                else:
                    if command == 's':
                        print("You want to search for a restaurant")
                    else:
                        if command == 'p':
                            print("You want to print the restaurants")
                        else:
                            print("You typed '", command, "'.  ",
                                  "That isn't a valid command.  ",
                                  "Please try again.", sep="")
    return RC
"""
The code above works.  But it's kind of clunky, with all its ifs
and elses, and the questions straggle diagonally down the page.
There's a cleaner syntax for this kind of question, no-well-is-it-THIS,
no-well-is-it-THAT, no-well-is-it-the-other pattern.
As soon as you get an answer, you're done.
Often in classifying kinds of situations.
"""


def handle_commands(RC: 'list of Restaurant') -> 'list of Restaurant':
    ''' Print menu, get response, do the right thing '''
    while True:
        command = input(MENU)
        if command == 'q':
            break   # User wants to quit; break out of loop.
        elif command == 'a':
            # print("You want to add a new restaurant")
            new_rest = Restaurant_get_info()
            RC = Collection_add(RC, new_rest)
            # print("Add", new_rest.name, "to the database.")
        elif command == 'r':
            # print("You want to remove a restaurant")
            name_to_remove = input("Please enter the name of the " +
                                 "restaurant to remove:  ")
            RC = Collection_remove_by_name(RC, name_to_remove)
        elif command == 's':
            #print("You want to search for a restaurant")
            name_to_find = input("Please enter the name of the " +
                                 "restaurant to search for:  ")
            print(Collection_to_str(Collection_search_by_name(RC, name_to_find)))
        elif command == 'p':
            # print("You want to print the restaurants")
            print(Collection_to_str(RC))
        else:
            print("You typed '", command, "'.  ",
            "That isn't a valid command.  ",
            "Please try again.", sep="")

    return RC

## MODEL PART OF THE PROGRAM

## RESTAURANTS

Restaurant = namedtuple('Restaurant', 'name cuisine phone dish price')
# Create a few restaurants for testing
R1 = Restaurant('Taillevent', 'French', '01-22-33-44-55',
                'Escargots', 45.55)
R2 = Restaurant('Thai Dishes', 'Thai', '334-4433', 'Mee Krob', 8.95)
R3 = Restaurant('Thai Touch', 'Thai', '444-3333', 'Larb Gai', 11.00)

# print(R1)  # Kind of clunky, not user friendly

def Restaurant_print(R: Restaurant) -> None:  # Just prints
    ''' Print the Restaurant info in readable form '''
    print("Name:     ", R.name)
    print("Cuisine:  ", R.cuisine)
    print("Phone:    ", R.phone)
    print("Dish:     ", R.dish)
    print("Price:     $", str(R.price), sep="")
    return
# Restaurant_print(R1)

def Restaurant_to_str(R: Restaurant) -> str:
    ''' Create a string with the restaurant info in readable form '''
    return "Name:     " + R.name + "\n" + \
        "Cuisine:  " + R.cuisine + "\n" + \
        "Phone:    " + R.phone  + "\n" + \
        "Dish:     " + R.dish  + "\n" + \
        "Price:    $" + str(R.price) + "\n\n"

def Restaurant_to_str(R: Restaurant) -> str:
    ''' Create a string with the restaurant info in readable form '''
    return ("Name:     " + R.name + "\n" +
        "Cuisine:  " + R.cuisine + "\n" +
        "Phone:    " + R.phone  + "\n" +
        "Dish:     " + R.dish  + "\n" +
        "Price:    $" + str(R.price) + "\n\n")

# print(Restaurant_to_str(R1))

def Restaurant_get_info() -> Restaurant:
    ''' Return a Restaurant created from the user's responses '''
    n = input("Please enter the restaurant's name:  ")
    c = input("Please enter the kind of food served:  ")
    ph = input("Please enter the phone number:  ")
    d = input("Please enter the name of the best dish:  ")
    p = input("Please enter the price of that dish:  ")
    return Restaurant(n, c, ph, d, float(p))

# R4 = Restaurant_get_info()
# print(R4)
# print(Restaurant_to_str(R4))

def Restaurant_to_tabbed_string(r: Restaurant) -> str:
    ''' Return a string containing the restaurant's fields,
        separated by tabs
    '''
    return r.name + "\t" + r.cuisine + "\t" + r.phone + "\t" + \
            r.dish  + "\t" + str(r.price)
assert Restaurant_to_tabbed_string(R3) == "Thai Touch\tThai\t444-3333\t" + \
                                          "Larb Gai\t11.0"

"""
print(1, 2, 3,
      4, 5, 6)
"""

## COLLECTION
# A collection of Restaurants is a list of Restaurant objects
# We might decide to change that implementation later on; there are
# lots of alternatives.  To make that easiest, we create a bunch of
# functions that together have an API, Applications Programming Interface:
# The names of the functions, their arguments' types, the return type,
# and what the function does.  That limits what the caller of these
# functions needs to know. ("Information Hiding")

TRC = [R1, R2, R3]  # "Test Restaurant Collection

def Collection_new() -> 'list of Restaurants':
    ''' Create and return a new, empty, list '''
    return [ ]
assert Collection_new() == [ ]

def Collection_add(C: 'list of Restaurant', r: Restaurant) -> 'list of Restaurants':
    ''' Return the list with the new restaurant added at the end '''
    C.append(r)
    return C
    # or  return C + [r]
assert Collection_add(Collection_new(), R1) == [R1]
assert Collection_add([R2, R3], R1) == [R2, R3, R1]

def Collection_to_str(C: 'list of Restaurant') -> str:
    ''' Return a string representing the whole collection'''
    result = ""
    for r in C:
        result = result + Restaurant_to_str(r)
    return result
assert Collection_to_str(Collection_new()) == ""
assert Collection_to_str(TRC) == \
    Restaurant_to_str(R1) + Restaurant_to_str(R2) + Restaurant_to_str(R3)

def Collection_search_by_name(C: 'list of Restaurant', looking_for: str) \
    -> 'list of Restaurant':
    ''' Return a collection containing those restaurants in the first arg.
        that match the name you're looking for. '''
    result = [ ]
    for r in C:
        if r.name == looking_for:
            result.append(r)
    return result
assert Collection_search_by_name(TRC, "Taillevent") == [R1]
assert Collection_search_by_name(TRC, "McDonald's") == []
assert Collection_search_by_name([R2, R3, R2, R1], "Thai Dishes") == [R2,R2]

def Collection_remove_by_name(C: 'list of Restaurant', to_remove: str) \
    -> 'list of Restaurant':
    ''' Return collection with the named restaurant(s) deleted '''
    result = []
    for r in C:
        if r.name != to_remove:
            result.append(r)
    return result
### Test cases:  Many configurations
# Remove from the empty list [still empty]
assert Collection_remove_by_name([], "Taillevent") == [ ]
# Remove item not on list at all
assert Collection_remove_by_name(TRC, "McDonald's") == TRC
# Remmove item from list, result empty
assert Collection_remove_by_name([R3], R3.name) == [ ]
# Remove first item from list
assert Collection_remove_by_name(TRC, "Taillevent") == [R2, R3]
# Remove last item on list
assert Collection_remove_by_name(TRC, "Thai Touch") == [R1, R2]
# Remove from middle of list
assert Collection_remove_by_name(TRC, "Thai Dishes") == [R1, R3]
# Remove multiple occurrences of name
assert Collection_remove_by_name([R3, R2, R3, R1, R3],
                                 "Thai Touch") == [R2, R1]

def write_file_from_collection(C: 'list of Restaurant') -> None:
    ''' Write file called restaurants.txt, tab-delimited
    '''
    outfile = open('restaurants.txt', 'w')
    for r in C:
        outfile.write(Restaurant_to_tabbed_string(r) + "\n")
    outfile.close()
    return

def fill_collection_from_file(filename: str) -> 'list of Restaurant':
    ''' Read restaurant info from file; return collection.
        File has one lline for each restaurant, with fields
        delimited by tabs.
    '''
    result = []
    infile = open(filename, 'r')
    for line in infile:
        field_list = line.split("\t")
        new_rest = Restaurant(field_list[0], field_list[1],
                              field_list[2], field_list[3],
                              float(field_list[4]))
        result.append(new_rest)
    infile.close()
    return result


## START EVERYTHING UP
restaurants()
