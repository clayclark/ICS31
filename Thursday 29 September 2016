# ICS 31, Thursday 29 September 2016, 11am

## Compute the total bill in a restaurant, with tax and tip,
##   given the base amount of the bill.
"""
TAX_RATE = 0.08
print("Hello.  What's your name?")
user_name = input()
print("Hello,", user_name, ".  What's the base amount of the bill?")
base_amount = float(input())

print("I will compute the overall total on $", base_amount, 'with tax and tip.')
print("What percentage tip would you like to leave?  (15, 18, 20, ...)")
tip_rate = float(input())
print("Leaving", tip_rate, "% tip.")
tax_amount = base_amount * TAX_RATE
tip_amount = base_amount * (tip_rate / 100)
print("The total to pay is $", base_amount + tax_amount + tip_amount, ".")
"""

## Programming languages are FORMAL LANGUAGES
## English, Urdu, French, Vietnamese are human languages, NATURAL LANGUAGES

## SYNTAX -- Its grammar, how you say it
## SEMANTICS -- Its meaning, what it does

## Assignment statement
# SYNTAX:                  name   =    expression
# SEMANTICS:  Evaluate the expression and assign/bind/associate it with the name.

"""
Things/nouns/objects
   Each object has a type:  int    float    str   boolean
   type(x) returns the type of x
   We can combine these into expressions.
   
Actions/verbs
   Statements:      assignment stmt
   Operators:         + - * /       // (integer division)  % (modulo; remainder)
                      +  for string concatenation
   Functions:  print()
                input()  str()   int()   float()   sqrt()   len()


Things/nouns/objects:
   Single-valued:   int    float    bool
   Multiple-valued:
      str
      LISTS -- Collection of things of the same type
         [ 75, 78, 85, 92, 92, 103, 95, 85, 85 ]
         ["Huey", "Dewey", "Louie"]
         
      NAMEDTUPLES -- for packaging components into one multi-attribute item
          A student has a name, ID number, major, GPA
   
"""
temps =   [ 75, 78, 85, 92, 92, 103, 95, 85, 85 ]
names =   ["Huey", "Dewey", "Louie"]

# Operators on lists:    in    ==
print(103 in temps)
print("Should be True")
print(35 in temps, "should be False")
print("Dewey" in names, "should be True", "Scrooge" in names, "should be False")
print(temps in names, "should be False because temps ISN'T an item in names")
print([75, 78, 85] in temps, "should be False; that LIST  isn't in temps.")
print([75, 78, 85] in [23, [75, 78, 85], 88, 99, 99], "should be True")
print()
print([75, 78, 85] == [75, 78, 85] , "should be True")
print([75, 78, 85] == [75, 78, 85, 99] , "should be False")

no_names_yet = [ ]   #The empty list
print(len(no_names_yet))

# Indexing:  Another operation on lists:  Refer to specific elements/items
# List items are numered starting at zero "zero-based indexing"
print(temps[1], "is 78;", temps[0], "is 75")
something = " Hello"
print("-->" + something[0] + "<--")
print("-->" + something[1] + "<--")

## NAMEDTUPLES

## STEP ONE:  Set it up.  Say this once at the top of your program
from collections import namedtuple

## STEP TWO:  Define what your object looks like.
#  A student has a name, an ID number, a major, and a GPA
Student = namedtuple('Student', 'name ID major GPA')

## STEP THREE:  Create a couple of objects of this new type
s1 = Student("Peter Anteater", "33445566", "CGS", 3.45)
s2 = Student("Paula Programmer", "11223344", "CS", 3.65)

## STEP FOUR: Refer to individual FIELDS as needed with dot notation:
print("GPA of first student:", s1.GPA)
print(type(s1))
